---
- name: Setup Chat App Server (Amazon Linux 2/2023 - Node.js 16, Python 3.11, PM2, Logs)
  hosts: chat_server
  become: yes
  gather_facts: no

  pre_tasks:
    - name: Detect OS version
      ansible.builtin.shell: cat /etc/os-release
      register: os_release
      changed_when: false

    - name: Install Python 3.11 via package manager
      block:
        - name: Amazon Linux 2023 - install with dnf
          ansible.builtin.shell: |
            dnf install -y python3.11 python3.11-pip
            alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1
            python3 --version
          when: '"Amazon Linux 2023" in os_release.stdout'

        - name: Amazon Linux 2 - install via IUS repo
          ansible.builtin.shell: |
            yum install -y https://repo.ius.io/ius-release-el7.rpm
            yum install -y python311 python311-pip
            alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1
            python3 --version
          when: '"Amazon Linux 2" in os_release.stdout'

    - name: Set Ansible to use Python 3.11
      set_fact:
        ansible_python_interpreter: /usr/bin/python3.11

  tasks:
    - name: Gather facts with new Python
      setup:

    - name: Enable nginx1 via amazon-linux-extras
      ansible.builtin.shell: amazon-linux-extras enable nginx1 || true
      args:
        executable: /bin/bash

    - name: Clean yum metadata
      ansible.builtin.shell: yum clean metadata || true
      args:
        executable: /bin/bash

    - name: Install Nginx
      ansible.builtin.shell: yum install -y nginx || dnf install -y nginx
      args:
        executable: /bin/bash

    - name: Install Node.js 16 from NodeSource
      ansible.builtin.shell: |
        curl -fsSL https://rpm.nodesource.com/setup_16.x | bash -
        while fuser /var/run/yum.pid >/dev/null 2>&1; do
          echo "Waiting for yum lock..."; sleep 3;
        done
        yum install -y nodejs || dnf install -y nodejs
      args:
        executable: /bin/bash
      register: nodejs_output
      failed_when: false

    - name: Ensure npm is installed
      ansible.builtin.shell: npm -v
      register: npm_check
      failed_when: npm_check.rc != 0
      changed_when: false

    - name: Install pm2 globally for managing Node.js apps
      ansible.builtin.shell: npm install -g pm2
      args:
        executable: /bin/bash

    - name: Create PM2 log directory
      ansible.builtin.file:
        path: /var/log/pm2
        state: directory
        owner: ec2-user
        group: ec2-user
        mode: '0755'

    - name: Copy Node.js app from control node to EC2 (excluding node_modules)
      ansible.builtin.copy:
        src: ./files/
        dest: /home/ec2-user/chat-app/files/
        owner: ec2-user
        group: ec2-user
        mode: '0755'
        exclude:
          - node_modules
          - .git
          - .vscode

    - name: Install Node.js dependencies on EC2
      ansible.builtin.shell: |
        cd /home/ec2-user/chat-app/files
        npm install
      args:
        executable: /bin/bash

    - name: Start Node.js app with PM2 and log to custom paths
      ansible.builtin.shell: |
        cd /home/ec2-user/chat-app/files
        pm2 delete chat-app || true
        pm2 start app.js --name chat-app \
          --output /var/log/pm2/chat-app.out.log \
          --error /var/log/pm2/chat-app.err.log
      args:
        executable: /bin/bash

    - name: Configure pm2 to auto-start on system boot
      ansible.builtin.shell: |
        pm2 startup systemd -u ec2-user --hp /home/ec2-user
        pm2 save
      args:
        executable: /bin/bash

    - name: Enable and start Nginx
      ansible.builtin.service:
        name: nginx
        state: started
        enabled: yes
